-fixare errore su NUM_OF_N_TO_FACTORIZE maggiore di 1.
-rimuovere tutte le occorrenze di versioni multiple e funzioni che terminano per _f
-migliorare l'accesso alle strutture dati esistenti per sfruttare la massimo la cache locality (implementare factor base con array dinamico e algoritmo di sieving che per calcolare la somma dei log di P cicla in un modo specifico)
-provare ad inserire relazioni quadratiche uguali(poche) per vedere se il codice è robusto e l'algoritmo continua a fattorizzare correttamente
-fare in modo che i thread non vengano mai ricreati tramite barriere di sincronizzazione(
-alloc/free meno possibile gestione della memoria manuale con wrapper,riutilizzo della memoria liberata o con madvise,posix_memalign mallopt,madvise ecc
-parallelizzare le parti sequenziali come la parte di geometria
-inserire define per far assumere al programma diversi comportamenti in base alla compilazione
-inserire variabili per thread dove necessario
-in ogni istante tutti i thread devono essere running(in esecuzione o meno), speculare dove possibile se è conveniente
-meccanismo dei segnali per thread se serve a qualcosa
-parallelizzare la riduzione della matrice a scala
-pulizia codice
-scrivere codice a parte per la fase di training per scegliere m e B
vedere se conviene inserire la parte di training per un numero specifico da fattorizzare all'interno del programma(da considerare nel tempo di esecuzione del programma)
-cache profilers
-training su M e B parallelo e su tutti gli altri parametri
-accorpare mpz_init e mpz_clear non dovrebbe essere cosi rilevante per le performance, il core della computazione sta sulla fase di sieving
-inserire volatile e inline,register ed altri modificatori dove conviene
il modo in cui vengono calcolati M e B deve dipendere dalla velocità dell'algoritmo(magari l'algoritmo è strutturato per trattare M molto alti e B molto bassi), lo stesso discorso vale per tutti gli altri parametri
implementare un buon algoritmo di training che ottiene dei buoni parametri per velocizzare al massimo la fase di sieving(potrebbe rallentare la fase di algebra step)
-ristrutturare l'intero algoritmo in modo tale che sia completamente non bloccante e incrementale(se qualche informazione non basta l'aggiunta di informazioni avviene in modo "append")
-se invece del logaritmo memorizziamo il numero di volte che un numero viene diviso per primi diversi possiamo stabilire teoricamente un log_thresold tale che il numero è sicuramente B_smooth? se viene diviso per n fattori primi diversi la parte restante deve essere minore della radice n-esima del numero stesso?la parte restante potrebbe non essere divisibile completamente rispetto alla factor base, ma sicuramente è un potenziale B_smooth che vale la pena dividerlo per vedere se è semi_B_smooth o B_smooth
-implementare algoritmi di training su tutti i possibili parametri(sia offline sia online(a runtime ) ).tutti i parametri si intende M,B,a,log_thresold ecc. L'algoritmo offline deve utilizzare lo stesso identico meccanismo usato nell'algoritmo online,perché dei buoni parametri dipendono strettamente dall'implementazione del setaccio o dell'algoritmo in sé
-mettere variabili globali per thread tutte quelle variabili globali che non cambiano il loro valore per una certa esecuzione di cui non si vuole ricalcolare l'indirizzo a partire da struct es thread_data.b, es. il valore di b rimane costante fintantoché il thread ha finito il suo compito.
-warning:sistemare il codice dei check sulla parte di geometria, c'è una macro chiamata TODO con tutti i pezzi di codice da sistemare, i check stampano invalid pivot,forse o è sbagliato il check o viene ridotta male la matrice a scala, se viene ridotta male la matrice a scala potrebbe fare fatica a trovare le fattorizzazioni
